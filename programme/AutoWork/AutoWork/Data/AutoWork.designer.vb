'------------------------------------------------------------------------------
' <auto-generated>
'     此代码由工具生成。
'     运行时版本:4.0.30319.42000
'
'     对此文件的更改可能会导致不正确的行为，并且如果
'     重新生成代码，这些更改将会丢失。
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection
Imports System.Runtime.Serialization


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AutoWork")>  _
Partial Public Class AutoWorkDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "可扩展性方法定义"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertHistory(instance As History)
    End Sub
  Partial Private Sub UpdateHistory(instance As History)
    End Sub
  Partial Private Sub DeleteHistory(instance As History)
    End Sub
  Partial Private Sub InsertPart(instance As Part)
    End Sub
  Partial Private Sub UpdatePart(instance As Part)
    End Sub
  Partial Private Sub DeletePart(instance As Part)
    End Sub
  Partial Private Sub InsertRoutine(instance As Routine)
    End Sub
  Partial Private Sub UpdateRoutine(instance As Routine)
    End Sub
  Partial Private Sub DeleteRoutine(instance As Routine)
    End Sub
  Partial Private Sub InsertRoutineOnWorkInsruction(instance As RoutineOnWorkInsruction)
    End Sub
  Partial Private Sub UpdateRoutineOnWorkInsruction(instance As RoutineOnWorkInsruction)
    End Sub
  Partial Private Sub DeleteRoutineOnWorkInsruction(instance As RoutineOnWorkInsruction)
    End Sub
  Partial Private Sub InsertStaff(instance As Staff)
    End Sub
  Partial Private Sub UpdateStaff(instance As Staff)
    End Sub
  Partial Private Sub DeleteStaff(instance As Staff)
    End Sub
  Partial Private Sub InsertTraining(instance As Training)
    End Sub
  Partial Private Sub UpdateTraining(instance As Training)
    End Sub
  Partial Private Sub DeleteTraining(instance As Training)
    End Sub
  Partial Private Sub InsertWorkInstruction(instance As WorkInstruction)
    End Sub
  Partial Private Sub UpdateWorkInstruction(instance As WorkInstruction)
    End Sub
  Partial Private Sub DeleteWorkInstruction(instance As WorkInstruction)
    End Sub
  Partial Private Sub InsertOrder(instance As [Order])
    End Sub
  Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
  Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
  Partial Private Sub InsertWorkStation(instance As WorkStation)
    End Sub
  Partial Private Sub UpdateWorkStation(instance As WorkStation)
    End Sub
  Partial Private Sub DeleteWorkStation(instance As WorkStation)
    End Sub
  Partial Private Sub InsertELabelOnForPartOnWorkstation(instance As ELabelOnForPartOnWorkstation)
    End Sub
  Partial Private Sub UpdateELabelOnForPartOnWorkstation(instance As ELabelOnForPartOnWorkstation)
    End Sub
  Partial Private Sub DeleteELabelOnForPartOnWorkstation(instance As ELabelOnForPartOnWorkstation)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.AutoWork.MySettings.Default.AutoWorkConnectionString3, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property History() As System.Data.Linq.Table(Of History)
		Get
			Return Me.GetTable(Of History)
		End Get
	End Property
	
	Public ReadOnly Property Part() As System.Data.Linq.Table(Of Part)
		Get
			Return Me.GetTable(Of Part)
		End Get
	End Property
	
	Public ReadOnly Property PartOnRoutine() As System.Data.Linq.Table(Of PartOnRoutine)
		Get
			Return Me.GetTable(Of PartOnRoutine)
		End Get
	End Property
	
	Public ReadOnly Property Routine() As System.Data.Linq.Table(Of Routine)
		Get
			Return Me.GetTable(Of Routine)
		End Get
	End Property
	
	Public ReadOnly Property RoutineOnWorkInsruction() As System.Data.Linq.Table(Of RoutineOnWorkInsruction)
		Get
			Return Me.GetTable(Of RoutineOnWorkInsruction)
		End Get
	End Property
	
	Public ReadOnly Property Staff() As System.Data.Linq.Table(Of Staff)
		Get
			Return Me.GetTable(Of Staff)
		End Get
	End Property
	
	Public ReadOnly Property Training() As System.Data.Linq.Table(Of Training)
		Get
			Return Me.GetTable(Of Training)
		End Get
	End Property
	
	Public ReadOnly Property WorkInstruction() As System.Data.Linq.Table(Of WorkInstruction)
		Get
			Return Me.GetTable(Of WorkInstruction)
		End Get
	End Property
	
	Public ReadOnly Property RoutineOnWorkInstructionDetails() As System.Data.Linq.Table(Of RoutineOnWorkInstructionDetails)
		Get
			Return Me.GetTable(Of RoutineOnWorkInstructionDetails)
		End Get
	End Property
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
		Get
			Return Me.GetTable(Of [Order])
		End Get
	End Property
	
	Public ReadOnly Property WorkStations() As System.Data.Linq.Table(Of WorkStation)
		Get
			Return Me.GetTable(Of WorkStation)
		End Get
	End Property
	
	Public ReadOnly Property LepsWorkInstructionOnAW() As System.Data.Linq.Table(Of LepsWorkInstructionOnAW)
		Get
			Return Me.GetTable(Of LepsWorkInstructionOnAW)
		End Get
	End Property
	
	Public ReadOnly Property ELabelOnForPartOnWorkstation() As System.Data.Linq.Table(Of ELabelOnForPartOnWorkstation)
		Get
			Return Me.GetTable(Of ELabelOnForPartOnWorkstation)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.History"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class History
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _staffId As String
	
	Private _routineId As String
	
	Private _workStationId As String
	
	Private _orderId As String
	
	Private _workInstructionId As String
	
	Private _routineNormalTime As Integer
	
	Private _actualTime As Integer
	
	Private _qualityCode As Integer
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnstaffIdChanging(value As String)
    End Sub
    Partial Private Sub OnstaffIdChanged()
    End Sub
    Partial Private Sub OnroutineIdChanging(value As String)
    End Sub
    Partial Private Sub OnroutineIdChanged()
    End Sub
    Partial Private Sub OnworkStationIdChanging(value As String)
    End Sub
    Partial Private Sub OnworkStationIdChanged()
    End Sub
    Partial Private Sub OnorderIdChanging(value As String)
    End Sub
    Partial Private Sub OnorderIdChanged()
    End Sub
    Partial Private Sub OnworkInstructionIdChanging(value As String)
    End Sub
    Partial Private Sub OnworkInstructionIdChanged()
    End Sub
    Partial Private Sub OnroutineNormalTimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnroutineNormalTimeChanged()
    End Sub
    Partial Private Sub OnactualTimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnactualTimeChanged()
    End Sub
    Partial Private Sub OnqualityCodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnqualityCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property staffId() As String
		Get
			Return Me._staffId
		End Get
		Set
			If (String.Equals(Me._staffId, value) = false) Then
				Me.OnstaffIdChanging(value)
				Me.SendPropertyChanging
				Me._staffId = value
				Me.SendPropertyChanged("staffId")
				Me.OnstaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routineId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property routineId() As String
		Get
			Return Me._routineId
		End Get
		Set
			If (String.Equals(Me._routineId, value) = false) Then
				Me.OnroutineIdChanging(value)
				Me.SendPropertyChanging
				Me._routineId = value
				Me.SendPropertyChanged("routineId")
				Me.OnroutineIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workStationId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property workStationId() As String
		Get
			Return Me._workStationId
		End Get
		Set
			If (String.Equals(Me._workStationId, value) = false) Then
				Me.OnworkStationIdChanging(value)
				Me.SendPropertyChanging
				Me._workStationId = value
				Me.SendPropertyChanged("workStationId")
				Me.OnworkStationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property orderId() As String
		Get
			Return Me._orderId
		End Get
		Set
			If (String.Equals(Me._orderId, value) = false) Then
				Me.OnorderIdChanging(value)
				Me.SendPropertyChanging
				Me._orderId = value
				Me.SendPropertyChanged("orderId")
				Me.OnorderIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workInstructionId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property workInstructionId() As String
		Get
			Return Me._workInstructionId
		End Get
		Set
			If (String.Equals(Me._workInstructionId, value) = false) Then
				Me.OnworkInstructionIdChanging(value)
				Me.SendPropertyChanging
				Me._workInstructionId = value
				Me.SendPropertyChanged("workInstructionId")
				Me.OnworkInstructionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routineNormalTime", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property routineNormalTime() As Integer
		Get
			Return Me._routineNormalTime
		End Get
		Set
			If ((Me._routineNormalTime = value)  _
						= false) Then
				Me.OnroutineNormalTimeChanging(value)
				Me.SendPropertyChanging
				Me._routineNormalTime = value
				Me.SendPropertyChanged("routineNormalTime")
				Me.OnroutineNormalTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actualTime", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property actualTime() As Integer
		Get
			Return Me._actualTime
		End Get
		Set
			If ((Me._actualTime = value)  _
						= false) Then
				Me.OnactualTimeChanging(value)
				Me.SendPropertyChanging
				Me._actualTime = value
				Me.SendPropertyChanged("actualTime")
				Me.OnactualTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qualityCode", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property qualityCode() As Integer
		Get
			Return Me._qualityCode
		End Get
		Set
			If ((Me._qualityCode = value)  _
						= false) Then
				Me.OnqualityCodeChanging(value)
				Me.SendPropertyChanging
				Me._qualityCode = value
				Me.SendPropertyChanged("qualityCode")
				Me.OnqualityCodeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Part"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Part
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _partnr As String
	
	Private _partDesc As String
	
	Private _supplierNr As String
	
	Private _customerNr As String
	
	Private _images As String
	
	Private _ELabelOnForPartOnWorkstation As EntitySet(Of ELabelOnForPartOnWorkstation)
	
	Private serializing As Boolean
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnpartnrChanging(value As String)
    End Sub
    Partial Private Sub OnpartnrChanged()
    End Sub
    Partial Private Sub OnpartDescChanging(value As String)
    End Sub
    Partial Private Sub OnpartDescChanged()
    End Sub
    Partial Private Sub OnsupplierNrChanging(value As String)
    End Sub
    Partial Private Sub OnsupplierNrChanged()
    End Sub
    Partial Private Sub OncustomerNrChanging(value As String)
    End Sub
    Partial Private Sub OncustomerNrChanged()
    End Sub
    Partial Private Sub OnimagesChanging(value As String)
    End Sub
    Partial Private Sub OnimagesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partnr", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property partnr() As String
		Get
			Return Me._partnr
		End Get
		Set
			If (String.Equals(Me._partnr, value) = false) Then
				Me.OnpartnrChanging(value)
				Me.SendPropertyChanging
				Me._partnr = value
				Me.SendPropertyChanged("partnr")
				Me.OnpartnrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partDesc", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property partDesc() As String
		Get
			Return Me._partDesc
		End Get
		Set
			If (String.Equals(Me._partDesc, value) = false) Then
				Me.OnpartDescChanging(value)
				Me.SendPropertyChanging
				Me._partDesc = value
				Me.SendPropertyChanged("partDesc")
				Me.OnpartDescChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_supplierNr", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property supplierNr() As String
		Get
			Return Me._supplierNr
		End Get
		Set
			If (String.Equals(Me._supplierNr, value) = false) Then
				Me.OnsupplierNrChanging(value)
				Me.SendPropertyChanging
				Me._supplierNr = value
				Me.SendPropertyChanged("supplierNr")
				Me.OnsupplierNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_customerNr", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property customerNr() As String
		Get
			Return Me._customerNr
		End Get
		Set
			If (String.Equals(Me._customerNr, value) = false) Then
				Me.OncustomerNrChanging(value)
				Me.SendPropertyChanging
				Me._customerNr = value
				Me.SendPropertyChanged("customerNr")
				Me.OncustomerNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_images", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property images() As String
		Get
			Return Me._images
		End Get
		Set
			If (String.Equals(Me._images, value) = false) Then
				Me.OnimagesChanging(value)
				Me.SendPropertyChanging
				Me._images = value
				Me.SendPropertyChanged("images")
				Me.OnimagesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_ELabelOnForPartOnWorkstation", Storage:="_ELabelOnForPartOnWorkstation", ThisKey:="partnr", OtherKey:="partNr"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6, EmitDefaultValue:=false)>  _
	Public Property ELabelOnForPartOnWorkstation() As EntitySet(Of ELabelOnForPartOnWorkstation)
		Get
			If (Me.serializing  _
						AndAlso (Me._ELabelOnForPartOnWorkstation.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ELabelOnForPartOnWorkstation
		End Get
		Set
			Me._ELabelOnForPartOnWorkstation.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ELabelOnForPartOnWorkstation(ByVal entity As ELabelOnForPartOnWorkstation)
		Me.SendPropertyChanging
		entity.Part = Me
	End Sub
	
	Private Sub detach_ELabelOnForPartOnWorkstation(ByVal entity As ELabelOnForPartOnWorkstation)
		Me.SendPropertyChanging
		entity.Part = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._ELabelOnForPartOnWorkstation = New EntitySet(Of ELabelOnForPartOnWorkstation)(AddressOf Me.attach_ELabelOnForPartOnWorkstation, AddressOf Me.detach_ELabelOnForPartOnWorkstation)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PartOnRoutine"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class PartOnRoutine
	
	Private _id As Integer
	
	Private _routineId As String
	
	Private _partnr As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routineId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property routineId() As String
		Get
			Return Me._routineId
		End Get
		Set
			If (String.Equals(Me._routineId, value) = false) Then
				Me._routineId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partnr", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property partnr() As String
		Get
			Return Me._partnr
		End Get
		Set
			If (String.Equals(Me._partnr, value) = false) Then
				Me._partnr = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Routine"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Routine
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _routineId As String
	
	Private _name As String
	
	Private _description As String
	
	Private _normalTime As Integer
	
	Private _RoutineOnWorkInsruction As EntitySet(Of RoutineOnWorkInsruction)
	
	Private serializing As Boolean
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnroutineIdChanging(value As String)
    End Sub
    Partial Private Sub OnroutineIdChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnnormalTimeChanging(value As Integer)
    End Sub
    Partial Private Sub OnnormalTimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routineId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property routineId() As String
		Get
			Return Me._routineId
		End Get
		Set
			If (String.Equals(Me._routineId, value) = false) Then
				Me.OnroutineIdChanging(value)
				Me.SendPropertyChanging
				Me._routineId = value
				Me.SendPropertyChanged("routineId")
				Me.OnroutineIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_normalTime", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property normalTime() As Integer
		Get
			Return Me._normalTime
		End Get
		Set
			If ((Me._normalTime = value)  _
						= false) Then
				Me.OnnormalTimeChanging(value)
				Me.SendPropertyChanging
				Me._normalTime = value
				Me.SendPropertyChanged("normalTime")
				Me.OnnormalTimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Routine_RoutineOnWorkInsruction", Storage:="_RoutineOnWorkInsruction", ThisKey:="routineId", OtherKey:="routineId"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5, EmitDefaultValue:=false)>  _
	Public Property RoutineOnWorkInsruction() As EntitySet(Of RoutineOnWorkInsruction)
		Get
			If (Me.serializing  _
						AndAlso (Me._RoutineOnWorkInsruction.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._RoutineOnWorkInsruction
		End Get
		Set
			Me._RoutineOnWorkInsruction.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RoutineOnWorkInsruction(ByVal entity As RoutineOnWorkInsruction)
		Me.SendPropertyChanging
		entity.Routine = Me
	End Sub
	
	Private Sub detach_RoutineOnWorkInsruction(ByVal entity As RoutineOnWorkInsruction)
		Me.SendPropertyChanging
		entity.Routine = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._RoutineOnWorkInsruction = New EntitySet(Of RoutineOnWorkInsruction)(AddressOf Me.attach_RoutineOnWorkInsruction, AddressOf Me.detach_RoutineOnWorkInsruction)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RoutineOnWorkInsruction"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class RoutineOnWorkInsruction
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _workInstructionId As String
	
	Private _routineId As String
	
	Private _video As String
	
	Private _sequence As Integer
	
	Private _picture As String
	
	Private _Routine As EntityRef(Of Routine)
	
	Private _WorkInstruction As EntityRef(Of WorkInstruction)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnworkInstructionIdChanging(value As String)
    End Sub
    Partial Private Sub OnworkInstructionIdChanged()
    End Sub
    Partial Private Sub OnroutineIdChanging(value As String)
    End Sub
    Partial Private Sub OnroutineIdChanged()
    End Sub
    Partial Private Sub OnvideoChanging(value As String)
    End Sub
    Partial Private Sub OnvideoChanged()
    End Sub
    Partial Private Sub OnsequenceChanging(value As Integer)
    End Sub
    Partial Private Sub OnsequenceChanged()
    End Sub
    Partial Private Sub OnpictureChanging(value As String)
    End Sub
    Partial Private Sub OnpictureChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workInstructionId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property workInstructionId() As String
		Get
			Return Me._workInstructionId
		End Get
		Set
			If (String.Equals(Me._workInstructionId, value) = false) Then
				If Me._WorkInstruction.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnworkInstructionIdChanging(value)
				Me.SendPropertyChanging
				Me._workInstructionId = value
				Me.SendPropertyChanged("workInstructionId")
				Me.OnworkInstructionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routineId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property routineId() As String
		Get
			Return Me._routineId
		End Get
		Set
			If (String.Equals(Me._routineId, value) = false) Then
				If Me._Routine.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnroutineIdChanging(value)
				Me.SendPropertyChanging
				Me._routineId = value
				Me.SendPropertyChanged("routineId")
				Me.OnroutineIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_video", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property video() As String
		Get
			Return Me._video
		End Get
		Set
			If (String.Equals(Me._video, value) = false) Then
				Me.OnvideoChanging(value)
				Me.SendPropertyChanging
				Me._video = value
				Me.SendPropertyChanged("video")
				Me.OnvideoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property sequence() As Integer
		Get
			Return Me._sequence
		End Get
		Set
			If ((Me._sequence = value)  _
						= false) Then
				Me.OnsequenceChanging(value)
				Me.SendPropertyChanging
				Me._sequence = value
				Me.SendPropertyChanged("sequence")
				Me.OnsequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_picture", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property picture() As String
		Get
			Return Me._picture
		End Get
		Set
			If (String.Equals(Me._picture, value) = false) Then
				Me.OnpictureChanging(value)
				Me.SendPropertyChanging
				Me._picture = value
				Me.SendPropertyChanged("picture")
				Me.OnpictureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Routine_RoutineOnWorkInsruction", Storage:="_Routine", ThisKey:="routineId", OtherKey:="routineId", IsForeignKey:=true)>  _
	Public Property Routine() As Routine
		Get
			Return Me._Routine.Entity
		End Get
		Set
			Dim previousValue As Routine = Me._Routine.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Routine.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Routine.Entity = Nothing
					previousValue.RoutineOnWorkInsruction.Remove(Me)
				End If
				Me._Routine.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RoutineOnWorkInsruction.Add(Me)
					Me._routineId = value.routineId
				Else
					Me._routineId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Routine")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WorkInstruction_RoutineOnWorkInsruction", Storage:="_WorkInstruction", ThisKey:="workInstructionId", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property WorkInstruction() As WorkInstruction
		Get
			Return Me._WorkInstruction.Entity
		End Get
		Set
			Dim previousValue As WorkInstruction = Me._WorkInstruction.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WorkInstruction.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WorkInstruction.Entity = Nothing
					previousValue.RoutineOnWorkInsruction.Remove(Me)
				End If
				Me._WorkInstruction.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RoutineOnWorkInsruction.Add(Me)
					Me._workInstructionId = value.id
				Else
					Me._workInstructionId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("WorkInstruction")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._Routine = CType(Nothing, EntityRef(Of Routine))
		Me._WorkInstruction = CType(Nothing, EntityRef(Of WorkInstruction))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Staff"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Staff
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As String
	
	Private _name As String
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Training"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class Training
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _staffId As String
	
	Private _routineId As String
	
	Private _workinstructionId As String
	
	Private _normalHour As Integer
	
	Private _actualHour As Integer
	
	Private _score As Integer
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnstaffIdChanging(value As String)
    End Sub
    Partial Private Sub OnstaffIdChanged()
    End Sub
    Partial Private Sub OnroutineIdChanging(value As String)
    End Sub
    Partial Private Sub OnroutineIdChanged()
    End Sub
    Partial Private Sub OnworkinstructionIdChanging(value As String)
    End Sub
    Partial Private Sub OnworkinstructionIdChanged()
    End Sub
    Partial Private Sub OnnormalHourChanging(value As Integer)
    End Sub
    Partial Private Sub OnnormalHourChanged()
    End Sub
    Partial Private Sub OnactualHourChanging(value As Integer)
    End Sub
    Partial Private Sub OnactualHourChanged()
    End Sub
    Partial Private Sub OnscoreChanging(value As Integer)
    End Sub
    Partial Private Sub OnscoreChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_staffId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property staffId() As String
		Get
			Return Me._staffId
		End Get
		Set
			If (String.Equals(Me._staffId, value) = false) Then
				Me.OnstaffIdChanging(value)
				Me.SendPropertyChanging
				Me._staffId = value
				Me.SendPropertyChanged("staffId")
				Me.OnstaffIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routineId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property routineId() As String
		Get
			Return Me._routineId
		End Get
		Set
			If (String.Equals(Me._routineId, value) = false) Then
				Me.OnroutineIdChanging(value)
				Me.SendPropertyChanging
				Me._routineId = value
				Me.SendPropertyChanged("routineId")
				Me.OnroutineIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workinstructionId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property workinstructionId() As String
		Get
			Return Me._workinstructionId
		End Get
		Set
			If (String.Equals(Me._workinstructionId, value) = false) Then
				Me.OnworkinstructionIdChanging(value)
				Me.SendPropertyChanging
				Me._workinstructionId = value
				Me.SendPropertyChanged("workinstructionId")
				Me.OnworkinstructionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_normalHour", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property normalHour() As Integer
		Get
			Return Me._normalHour
		End Get
		Set
			If ((Me._normalHour = value)  _
						= false) Then
				Me.OnnormalHourChanging(value)
				Me.SendPropertyChanging
				Me._normalHour = value
				Me.SendPropertyChanged("normalHour")
				Me.OnnormalHourChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_actualHour", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property actualHour() As Integer
		Get
			Return Me._actualHour
		End Get
		Set
			If ((Me._actualHour = value)  _
						= false) Then
				Me.OnactualHourChanging(value)
				Me.SendPropertyChanging
				Me._actualHour = value
				Me.SendPropertyChanged("actualHour")
				Me.OnactualHourChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_score", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property score() As Integer
		Get
			Return Me._score
		End Get
		Set
			If ((Me._score = value)  _
						= false) Then
				Me.OnscoreChanging(value)
				Me.SendPropertyChanging
				Me._score = value
				Me.SendPropertyChanged("score")
				Me.OnscoreChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WorkInstruction"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class WorkInstruction
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As String
	
	Private _name As String
	
	Private _RoutineOnWorkInsruction As EntitySet(Of RoutineOnWorkInsruction)
	
	Private serializing As Boolean
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As String)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property id() As String
		Get
			Return Me._id
		End Get
		Set
			If (String.Equals(Me._id, value) = false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WorkInstruction_RoutineOnWorkInsruction", Storage:="_RoutineOnWorkInsruction", ThisKey:="id", OtherKey:="workInstructionId"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3, EmitDefaultValue:=false)>  _
	Public Property RoutineOnWorkInsruction() As EntitySet(Of RoutineOnWorkInsruction)
		Get
			If (Me.serializing  _
						AndAlso (Me._RoutineOnWorkInsruction.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._RoutineOnWorkInsruction
		End Get
		Set
			Me._RoutineOnWorkInsruction.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RoutineOnWorkInsruction(ByVal entity As RoutineOnWorkInsruction)
		Me.SendPropertyChanging
		entity.WorkInstruction = Me
	End Sub
	
	Private Sub detach_RoutineOnWorkInsruction(ByVal entity As RoutineOnWorkInsruction)
		Me.SendPropertyChanging
		entity.WorkInstruction = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._RoutineOnWorkInsruction = New EntitySet(Of RoutineOnWorkInsruction)(AddressOf Me.attach_RoutineOnWorkInsruction, AddressOf Me.detach_RoutineOnWorkInsruction)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RoutineOnWorkInstructionDetails"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class RoutineOnWorkInstructionDetails
	
	Private _routineId As String
	
	Private _routineName As String
	
	Private _routineDescription As String
	
	Private _normalTime As Integer
	
	Private _video As String
	
	Private _sequence As Integer
	
	Private _picture As String
	
	Private _workInstructionId As String
	
	Private _workInstructionName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routineId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property routineId() As String
		Get
			Return Me._routineId
		End Get
		Set
			If (String.Equals(Me._routineId, value) = false) Then
				Me._routineId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routineName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property routineName() As String
		Get
			Return Me._routineName
		End Get
		Set
			If (String.Equals(Me._routineName, value) = false) Then
				Me._routineName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_routineDescription", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property routineDescription() As String
		Get
			Return Me._routineDescription
		End Get
		Set
			If (String.Equals(Me._routineDescription, value) = false) Then
				Me._routineDescription = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_normalTime", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property normalTime() As Integer
		Get
			Return Me._normalTime
		End Get
		Set
			If ((Me._normalTime = value)  _
						= false) Then
				Me._normalTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_video", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property video() As String
		Get
			Return Me._video
		End Get
		Set
			If (String.Equals(Me._video, value) = false) Then
				Me._video = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sequence", DbType:="Int NOT NULL"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property sequence() As Integer
		Get
			Return Me._sequence
		End Get
		Set
			If ((Me._sequence = value)  _
						= false) Then
				Me._sequence = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_picture", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property picture() As String
		Get
			Return Me._picture
		End Get
		Set
			If (String.Equals(Me._picture, value) = false) Then
				Me._picture = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workInstructionId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property workInstructionId() As String
		Get
			Return Me._workInstructionId
		End Get
		Set
			If (String.Equals(Me._workInstructionId, value) = false) Then
				Me._workInstructionId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workInstructionName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property workInstructionName() As String
		Get
			Return Me._workInstructionName
		End Get
		Set
			If (String.Equals(Me._workInstructionName, value) = false) Then
				Me._workInstructionName = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Order]"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class [Order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _orderId As String
	
	Private _workstationId As String
	
	Private _status As System.Nullable(Of Integer)
	
	Private _WorkStation As EntityRef(Of WorkStation)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnorderIdChanging(value As String)
    End Sub
    Partial Private Sub OnorderIdChanged()
    End Sub
    Partial Private Sub OnworkstationIdChanging(value As String)
    End Sub
    Partial Private Sub OnworkstationIdChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_orderId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property orderId() As String
		Get
			Return Me._orderId
		End Get
		Set
			If (String.Equals(Me._orderId, value) = false) Then
				Me.OnorderIdChanging(value)
				Me.SendPropertyChanging
				Me._orderId = value
				Me.SendPropertyChanged("orderId")
				Me.OnorderIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workstationId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property workstationId() As String
		Get
			Return Me._workstationId
		End Get
		Set
			If (String.Equals(Me._workstationId, value) = false) Then
				If Me._WorkStation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnworkstationIdChanging(value)
				Me.SendPropertyChanging
				Me._workstationId = value
				Me.SendPropertyChanged("workstationId")
				Me.OnworkstationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property status() As System.Nullable(Of Integer)
		Get
			Return Me._status
		End Get
		Set
			If (Me._status.Equals(value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WorkStation_Order", Storage:="_WorkStation", ThisKey:="workstationId", OtherKey:="workstationId", IsForeignKey:=true)>  _
	Public Property WorkStation() As WorkStation
		Get
			Return Me._WorkStation.Entity
		End Get
		Set
			Dim previousValue As WorkStation = Me._WorkStation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WorkStation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WorkStation.Entity = Nothing
					previousValue.Orders.Remove(Me)
				End If
				Me._WorkStation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Orders.Add(Me)
					Me._workstationId = value.workstationId
				Else
					Me._workstationId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("WorkStation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._WorkStation = CType(Nothing, EntityRef(Of WorkStation))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.WorkStation"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class WorkStation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _workstationId As String
	
	Private _name As String
	
	Private _prodLine As String
	
	Private _projectNr As String
	
	Private _currentStaff As String
	
	Private _isLast As System.Nullable(Of Boolean)
	
	Private _seq As System.Nullable(Of Integer)
	
	Private _lepsWorkstation As String
	
	Private _needStart As System.Nullable(Of Boolean)
	
	Private _needEnd As System.Nullable(Of Boolean)
	
	Private _Orders As EntitySet(Of [Order])
	
	Private _ELabelOnForPartOnWorkstation As EntitySet(Of ELabelOnForPartOnWorkstation)
	
	Private serializing As Boolean
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnworkstationIdChanging(value As String)
    End Sub
    Partial Private Sub OnworkstationIdChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnprodLineChanging(value As String)
    End Sub
    Partial Private Sub OnprodLineChanged()
    End Sub
    Partial Private Sub OnprojectNrChanging(value As String)
    End Sub
    Partial Private Sub OnprojectNrChanged()
    End Sub
    Partial Private Sub OncurrentStaffChanging(value As String)
    End Sub
    Partial Private Sub OncurrentStaffChanged()
    End Sub
    Partial Private Sub OnisLastChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisLastChanged()
    End Sub
    Partial Private Sub OnseqChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnseqChanged()
    End Sub
    Partial Private Sub OnlepsWorkstationChanging(value As String)
    End Sub
    Partial Private Sub OnlepsWorkstationChanged()
    End Sub
    Partial Private Sub OnneedStartChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnneedStartChanged()
    End Sub
    Partial Private Sub OnneedEndChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnneedEndChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workstationId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property workstationId() As String
		Get
			Return Me._workstationId
		End Get
		Set
			If (String.Equals(Me._workstationId, value) = false) Then
				Me.OnworkstationIdChanging(value)
				Me.SendPropertyChanging
				Me._workstationId = value
				Me.SendPropertyChanged("workstationId")
				Me.OnworkstationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(100) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_prodLine", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property prodLine() As String
		Get
			Return Me._prodLine
		End Get
		Set
			If (String.Equals(Me._prodLine, value) = false) Then
				Me.OnprodLineChanging(value)
				Me.SendPropertyChanging
				Me._prodLine = value
				Me.SendPropertyChanged("prodLine")
				Me.OnprodLineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_projectNr", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property projectNr() As String
		Get
			Return Me._projectNr
		End Get
		Set
			If (String.Equals(Me._projectNr, value) = false) Then
				Me.OnprojectNrChanging(value)
				Me.SendPropertyChanging
				Me._projectNr = value
				Me.SendPropertyChanged("projectNr")
				Me.OnprojectNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_currentStaff", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property currentStaff() As String
		Get
			Return Me._currentStaff
		End Get
		Set
			If (String.Equals(Me._currentStaff, value) = false) Then
				Me.OncurrentStaffChanging(value)
				Me.SendPropertyChanging
				Me._currentStaff = value
				Me.SendPropertyChanged("currentStaff")
				Me.OncurrentStaffChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isLast", DbType:="Bit"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=6)>  _
	Public Property isLast() As System.Nullable(Of Boolean)
		Get
			Return Me._isLast
		End Get
		Set
			If (Me._isLast.Equals(value) = false) Then
				Me.OnisLastChanging(value)
				Me.SendPropertyChanging
				Me._isLast = value
				Me.SendPropertyChanged("isLast")
				Me.OnisLastChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_seq", DbType:="Int"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=7)>  _
	Public Property seq() As System.Nullable(Of Integer)
		Get
			Return Me._seq
		End Get
		Set
			If (Me._seq.Equals(value) = false) Then
				Me.OnseqChanging(value)
				Me.SendPropertyChanging
				Me._seq = value
				Me.SendPropertyChanged("seq")
				Me.OnseqChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lepsWorkstation", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=8)>  _
	Public Property lepsWorkstation() As String
		Get
			Return Me._lepsWorkstation
		End Get
		Set
			If (String.Equals(Me._lepsWorkstation, value) = false) Then
				Me.OnlepsWorkstationChanging(value)
				Me.SendPropertyChanging
				Me._lepsWorkstation = value
				Me.SendPropertyChanged("lepsWorkstation")
				Me.OnlepsWorkstationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_needStart", DbType:="Bit"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=9)>  _
	Public Property needStart() As System.Nullable(Of Boolean)
		Get
			Return Me._needStart
		End Get
		Set
			If (Me._needStart.Equals(value) = false) Then
				Me.OnneedStartChanging(value)
				Me.SendPropertyChanging
				Me._needStart = value
				Me.SendPropertyChanged("needStart")
				Me.OnneedStartChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_needEnd", DbType:="Bit"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=10)>  _
	Public Property needEnd() As System.Nullable(Of Boolean)
		Get
			Return Me._needEnd
		End Get
		Set
			If (Me._needEnd.Equals(value) = false) Then
				Me.OnneedEndChanging(value)
				Me.SendPropertyChanging
				Me._needEnd = value
				Me.SendPropertyChanged("needEnd")
				Me.OnneedEndChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WorkStation_Order", Storage:="_Orders", ThisKey:="workstationId", OtherKey:="workstationId"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=11, EmitDefaultValue:=false)>  _
	Public Property Orders() As EntitySet(Of [Order])
		Get
			If (Me.serializing  _
						AndAlso (Me._Orders.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._Orders
		End Get
		Set
			Me._Orders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WorkStation_ELabelOnForPartOnWorkstation", Storage:="_ELabelOnForPartOnWorkstation", ThisKey:="workstationId", OtherKey:="workstationId"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=12, EmitDefaultValue:=false)>  _
	Public Property ELabelOnForPartOnWorkstation() As EntitySet(Of ELabelOnForPartOnWorkstation)
		Get
			If (Me.serializing  _
						AndAlso (Me._ELabelOnForPartOnWorkstation.HasLoadedOrAssignedValues = false)) Then
				Return Nothing
			End If
			Return Me._ELabelOnForPartOnWorkstation
		End Get
		Set
			Me._ELabelOnForPartOnWorkstation.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.WorkStation = Me
	End Sub
	
	Private Sub detach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.WorkStation = Nothing
	End Sub
	
	Private Sub attach_ELabelOnForPartOnWorkstation(ByVal entity As ELabelOnForPartOnWorkstation)
		Me.SendPropertyChanging
		entity.WorkStation = Me
	End Sub
	
	Private Sub detach_ELabelOnForPartOnWorkstation(ByVal entity As ELabelOnForPartOnWorkstation)
		Me.SendPropertyChanging
		entity.WorkStation = Nothing
	End Sub
	
	Private Sub Initialize()
		Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
		Me._ELabelOnForPartOnWorkstation = New EntitySet(Of ELabelOnForPartOnWorkstation)(AddressOf Me.attach_ELabelOnForPartOnWorkstation, AddressOf Me.detach_ELabelOnForPartOnWorkstation)
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerializing(ByVal context As StreamingContext)
		Me.serializing = true
	End Sub
	
	<Global.System.Runtime.Serialization.OnSerializedAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnSerialized(ByVal context As StreamingContext)
		Me.serializing = false
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.LepsWorkInstructionOnAW"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class LepsWorkInstructionOnAW
	
	Private _id As Integer
	
	Private _workstationId As String
	
	Private _lepsWI As String
	
	Private _awWI As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workstationId", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property workstationId() As String
		Get
			Return Me._workstationId
		End Get
		Set
			If (String.Equals(Me._workstationId, value) = false) Then
				Me._workstationId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lepsWI", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property lepsWI() As String
		Get
			Return Me._lepsWI
		End Get
		Set
			If (String.Equals(Me._lepsWI, value) = false) Then
				Me._lepsWI = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_awWI", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property awWI() As String
		Get
			Return Me._awWI
		End Get
		Set
			If (String.Equals(Me._awWI, value) = false) Then
				Me._awWI = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ELabelOnForPartOnWorkstation"),  _
 Global.System.Runtime.Serialization.DataContractAttribute()>  _
Partial Public Class ELabelOnForPartOnWorkstation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _labelAddr As String
	
	Private _partNr As String
	
	Private _workstationId As String
	
	Private _controlType As String
	
	Private _Part As EntityRef(Of Part)
	
	Private _WorkStation As EntityRef(Of WorkStation)
	
    #Region "可扩展性方法定义"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnlabelAddrChanging(value As String)
    End Sub
    Partial Private Sub OnlabelAddrChanged()
    End Sub
    Partial Private Sub OnpartNrChanging(value As String)
    End Sub
    Partial Private Sub OnpartNrChanged()
    End Sub
    Partial Private Sub OnworkstationIdChanging(value As String)
    End Sub
    Partial Private Sub OnworkstationIdChanged()
    End Sub
    Partial Private Sub OncontrolTypeChanging(value As String)
    End Sub
    Partial Private Sub OncontrolTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me.Initialize
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=1)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_labelAddr", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=2)>  _
	Public Property labelAddr() As String
		Get
			Return Me._labelAddr
		End Get
		Set
			If (String.Equals(Me._labelAddr, value) = false) Then
				Me.OnlabelAddrChanging(value)
				Me.SendPropertyChanging
				Me._labelAddr = value
				Me.SendPropertyChanged("labelAddr")
				Me.OnlabelAddrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_partNr", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=3)>  _
	Public Property partNr() As String
		Get
			Return Me._partNr
		End Get
		Set
			If (String.Equals(Me._partNr, value) = false) Then
				If Me._Part.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnpartNrChanging(value)
				Me.SendPropertyChanging
				Me._partNr = value
				Me.SendPropertyChanged("partNr")
				Me.OnpartNrChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_workstationId", DbType:="VarChar(50) NOT NULL", CanBeNull:=false),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=4)>  _
	Public Property workstationId() As String
		Get
			Return Me._workstationId
		End Get
		Set
			If (String.Equals(Me._workstationId, value) = false) Then
				If Me._WorkStation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnworkstationIdChanging(value)
				Me.SendPropertyChanging
				Me._workstationId = value
				Me.SendPropertyChanged("workstationId")
				Me.OnworkstationIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_controlType", DbType:="VarChar(50)"),  _
	 Global.System.Runtime.Serialization.DataMemberAttribute(Order:=5)>  _
	Public Property controlType() As String
		Get
			Return Me._controlType
		End Get
		Set
			If (String.Equals(Me._controlType, value) = false) Then
				Me.OncontrolTypeChanging(value)
				Me.SendPropertyChanging
				Me._controlType = value
				Me.SendPropertyChanged("controlType")
				Me.OncontrolTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Part_ELabelOnForPartOnWorkstation", Storage:="_Part", ThisKey:="partNr", OtherKey:="partnr", IsForeignKey:=true)>  _
	Public Property Part() As Part
		Get
			Return Me._Part.Entity
		End Get
		Set
			Dim previousValue As Part = Me._Part.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Part.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Part.Entity = Nothing
					previousValue.ELabelOnForPartOnWorkstation.Remove(Me)
				End If
				Me._Part.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ELabelOnForPartOnWorkstation.Add(Me)
					Me._partNr = value.partnr
				Else
					Me._partNr = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Part")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="WorkStation_ELabelOnForPartOnWorkstation", Storage:="_WorkStation", ThisKey:="workstationId", OtherKey:="workstationId", IsForeignKey:=true)>  _
	Public Property WorkStation() As WorkStation
		Get
			Return Me._WorkStation.Entity
		End Get
		Set
			Dim previousValue As WorkStation = Me._WorkStation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._WorkStation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._WorkStation.Entity = Nothing
					previousValue.ELabelOnForPartOnWorkstation.Remove(Me)
				End If
				Me._WorkStation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ELabelOnForPartOnWorkstation.Add(Me)
					Me._workstationId = value.workstationId
				Else
					Me._workstationId = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("WorkStation")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub Initialize()
		Me._Part = CType(Nothing, EntityRef(Of Part))
		Me._WorkStation = CType(Nothing, EntityRef(Of WorkStation))
		OnCreated
	End Sub
	
	<Global.System.Runtime.Serialization.OnDeserializingAttribute(),  _
	 Global.System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)>  _
	Public Sub OnDeserializing(ByVal context As StreamingContext)
		Me.Initialize
	End Sub
End Class
